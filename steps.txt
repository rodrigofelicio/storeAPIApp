
course:  https://rest-apis-flask.teclado.com/docs/course_intro/

SET UP PROCESS
01. Criar pasta
02. Criar venv dentro da pasta (python3 -m venv .venv)
03. Ativar venv na pasta (source .venv/bin/activate) - na frente da linha de comando aparece "(.venv)" sinalizando que a ativação foi realizada com sucesso
04. Fechar o terminal e abrir nova janela (cmd + J no mac dentro do vscode)
05. Instalar as bibliotecas usando pip
    pip install flask 
        após instalação é possível verificar que Flask foi instalado no ambiente virtual (pasta .venv/lib/flask e outras pastas (jinja2, etc) )
06. Criar app.py para iniciar dev com flask boiler plate
    app.py file
        from flask import Flask
        app = Flask(__name__)
07. Executar app.py (flask run)
08. Criar repo no git (logar no site e criar novo repo)
09. Vincular diretório (storeAPIApp) ao repositório (https://github.com/orgs/community/discussions/68237)
10. Subir código no github

DEV PROCESS
01. Criação do Modelo de Dados em python dictionaries para melhor gestão dos dados. Criar arquivo db.py e inserir os dicionários
    stores = {}
    items = {}
02. Instalar Docker Desktop
03. Criar Dockerfile na pasta do projeto
04. Criar requirements.txt (arquivo onde todas as bibliotecas Python devem ser listadas, no caso: flask, flask-smorest e python-dotenv)
05. Criar .flaskenv com variáveis de ambiente usadas pela app flask: FLASK_APP=app e FLASK_DEBUG=1
06. No arquivo app.py, criar os métodos CRUD (create, read, update, delete)
07. Adicionar mensagens de erro com flask_smorest
08. Adicionar error handling nos métodos (" abort(404, message="message if abort happens.") ")
09. Organizar código em app.py com endpoints da insomnia app p/ stores + items
10. Dockerize flask app (requirements.txt no dockerfile)
11. Executar o docker build ( docker build -t flask-smorest-api . )
12. Após realizado build do container, executar o container via comando "docker run  -dp 5000:5000 flask-smorest-ap"
13. Acessar o Docker desktop > Containers > Play no container flask-smorest-api (acessar http://127.0.0.1:5000/items para validar que o container está rodando ou enviar uma requisição via insomnia)
14. Mapear o diretório local da app para um volume no docker ( docker run -dp 5000:5000 -w /app -v "$(pwd):/app" flask-smorest-api )
15. Create blueprints and MethodViews: criar pasta resources e dois arquivos: store.py e item.py dentro dessa pasta
16. Importar Blueprint de flask_smorest e inserir parâmetros para documentação
17. Criar classe Store herdando MethodViews e criar métodos (GET, DELETE) a partir da rota blueprint (blp.route("/store/<string:store_id>"))
18. Criar os métodos da classe Store (GET, POST) e StoreList (GET, UPDATE). Deve existir uma classe para cada rota e cada rota deve ter seus respectivos HTTP Methods correspondentes implementados
19. Criar os métodos da classe Item (GET, PUT, DELETE) e ItemList (GET, POST). Deve existir uma classe para cada rota e cada rota deve ter seus respectivos HTTP Methods correspondentes implementados
20. Realizar validação com Marshmallow Schema. criar um arquivo schemas.py
21. Importar Schemas e fiedls (from marshmallow) e, para cada tipo de rota (blueprint), criar validações para os campos (comentários em cada linha de cada campo no arquivo)
22. Adicionar annotation arguments(<schema>) para os arquivos item.py e store.py. Não esquecer de adicionar o parâmetro que vai receber o JSON validado pelo schema object definido no schemas.py
23. O próximo passo é decorar os responses flask_smorest pra que eles utilizem os schemas marshmallow. Isso vai permitir passar os dados retornados ao cliente através do schema, sendo possível filtrar campos, fazer casting, etc. decorar os responses vai permitir definição do tipo de retorno para cada HTTP status code, além de atualizar a documentação

