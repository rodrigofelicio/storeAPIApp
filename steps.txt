
course:  https://rest-apis-flask.teclado.com/docs/course_intro/

SET UP PROCESS
01. Criar pasta
02. Criar venv dentro da pasta (python3 -m venv .venv)
03. Ativar venv na pasta (source .venv/bin/activate) - na frente da linha de comando aparece "(.venv)" sinalizando que a ativação foi realizada com sucesso
04. Fechar o terminal e abrir nova janela (cmd + J no mac dentro do vscode)
05. Instalar as bibliotecas usando pip
    pip install flask 
        após instalação é possível verificar que Flask foi instalado no ambiente virtual (pasta .venv/lib/flask e outras pastas (jinja2, etc) )
06. Criar app.py para iniciar dev com flask boiler plate
    app.py file
        from flask import Flask
        app = Flask(__name__)
07. Executar app.py (flask run)
08. Criar repo no git (logar no site e criar novo repo)
09. Vincular diretório (storeAPIApp) ao repositório (https://github.com/orgs/community/discussions/68237)
10. Subir código no github

DEV PROCESS
01. Criação do Modelo de Dados em python dictionaries para melhor gestão dos dados. Criar arquivo db.py e inserir os dicionários
    stores = {}
    items = {}
02. Instalar Docker Desktop
03. Criar Dockerfile na pasta do projeto
04. Criar requirements.txt (arquivo onde todas as bibliotecas Python devem ser listadas, no caso: flask, flask-smorest e python-dotenv)
05. Criar .flaskenv com variáveis de ambiente usadas pela app flask: FLASK_APP=app e FLASK_DEBUG=1
06. No arquivo app.py, criar os métodos CRUD (create, read, update, delete)
07. Adicionar mensagens de erro com flask_smorest
08. Adicionar error handling nos métodos (" abort(404, message="message if abort happens.") ")
09. Organizar código em app.py com endpoints da insomnia app p/ stores + items
10. Dockerize flask app (requirements.txt no dockerfile)
11. Executar o docker build ( docker build -t flask-smorest-api . )
12. Após realizado build do container, executar o container via comando "docker run  -dp 5000:5000 flask-smorest-ap"
13. Acessar o Docker desktop > Containers > Play no container flask-smorest-api (acessar http://127.0.0.1:5000/items para validar que o container está rodando ou enviar uma requisição via insomnia)
14. Mapear o diretório local da app para um volume no docker ( docker run -dp 5000:5000 -w /app -v "$(pwd):/app" flask-smorest-api )
15. Create blueprints and MethodViews: criar pasta resources e dois arquivos: store.py e item.py dentro dessa pasta
16. Importar Blueprint de flask_smorest e inserir parâmetros para documentação
17. Criar classe Store herdando MethodViews e criar métodos (GET, DELETE) a partir da rota blueprint (blp.route("/store/<string:store_id>"))
18. Criar os métodos da classe Store (GET, POST) e StoreList (GET, UPDATE). Deve existir uma classe para cada rota e cada rota deve ter seus respectivos HTTP Methods correspondentes implementados
19. Criar os métodos da classe Item (GET, PUT, DELETE) e ItemList (GET, POST). Deve existir uma classe para cada rota e cada rota deve ter seus respectivos HTTP Methods correspondentes implementados
20. Realizar validação com Marshmallow Schema. criar um arquivo schemas.py
21. Importar Schemas e fiedls (from marshmallow) e, para cada tipo de rota (blueprint), criar validações para os campos (comentários em cada linha de cada campo no arquivo)
22. Adicionar annotation arguments(<schema>) para os arquivos item.py e store.py. Não esquecer de adicionar o parâmetro que vai receber o JSON validado pelo schema object definido no schemas.py
23. O próximo passo é decorar os responses flask_smorest pra que eles utilizem os schemas marshmallow. Isso vai permitir passar os dados retornados ao cliente através do schema, sendo possível filtrar campos, fazer casting, etc. decorar os responses vai permitir definição do tipo de retorno para cada HTTP status code, além de atualizar a documentação
24. Adicionar SQLAlchemy ao projeto. SQLAlchemy é um ORM, Object Relational Mapper utilizado para facilitar a interação com base de dados. O flask tem uma extensão para interagir com esse ORM. No arquivo requirements.txt, adicionar duas linhas: sqlalchemy e flask-sqlalchemy.
25. Salvar o arquivo e executar "docker build -t <nome-do-container> . ". Em seguida, executar "docker run -dp 5000:5000 -w /app -v "$(pwd):/app" <nome-do-container> "
25. Em db.py, apagar os dicionários stores e items. importar SQLAlchemy da extensão flask_sqlalchemy e criar um objecto SQLAlchemy (db = SQLAlchemy) para linká-lo ao app flask, mas antes é necessário criar os modelos dos objetos relacionais
26. Criar uma pasta models na raiz da aplicação. Adicionar arquivos item.py e store.py onde deverão estar mapeados os modelos de dados de cada entidade (item e store). Comentários sobre ORM nas próprias classes
27. Atualizar os Schemas de dados em schemas.py.
28. Configurar Flask-SQLAlchemy para começar a usa-lo na aplicação. Comentários no arquivo. Adicionadas as linhas:
    6, 11, 12, 21, 37 a 44, 48 e 49

    Como SQLALCHEMY sabe quais tabelas criar?
    A linha import models permite que SQLAlchemy saiba quais modelos existem na aplicação. Como são instâncias de db.Model, SQLALCHEMY olha nos nomes de tabela existentes (__tablename__) e nos atributos definidos em db.Column para criar as tabelas.
    Nessa etapa o banco de dados SQLite é criado com as entidades item e store.
29. Alterar método post das entidades item.py e store.py para persistir informações no database SQLite utilizando SQLAlchemy
30. Alterar os métodos de manipulação de item/store (get, delete, update de um único item) nos arquivos item.py e store.py na pasta resources. Código alterado e commit realizado no github.
31. Implementar update nos arquivos item.py e store.py.
32. Alterar os métodos get de recuperação de lista de todos os modelos (item e store).
33. Alterar os métodos delete dos modelos.
34. Criação de entidade Tag (relacionamento many-to-many entre Stores e Tags) na aplicação.
    - criar arquivo tag.py no diretório models
    - alterar arquivo store.py no diretório models com infos de tag ("tags = db.relationship("TagModel", back_populates="tag", lazy="dynamic")")
    - importar o modelo TagModel criado no modelo tag.py no __init__.py  ("from models.tag import TagModel")
    - criar os schemas marshmallow para a entidade Tag no schemas.py
    - criar arquivo tag.py no diretório resources e adicionar códigos dos endpoints correspondentes (get e post para TagInStore e get para lista de todas as tags criadas)
    - registrar blueprint das tags no app.py ("from resources.tag import blp as TagBlueprint" and "api.register_blueprint(TagBlueprint)")
35.Criação de Many-to-Many entre Store-Tag-items
36. JWT authentication.
    - adicionar flask-jwt-extended no arquivo requirements.txt
    - adicionar flask-jwt-extended no arquivo app.py
    - criar o User model e schema
        - na pasta models, criar user.py
        - no arquivo __init__.py, adicionar o UserModel criado no passo anterior
        - adicionar a classe (schema) de UserModel no arqhivo schemas.py
37. Adicionar e registrar um endpoint na REST api
    - criar os endpoints na app insomnia (pasta users)
    - adicionar a lib PassLib no arquivo requirements.txt e rebuild no container para que ele considere as duas libs (jwt e passlib)
    - na pasta resources, criar o arquivo user.py
    - registrar o blueprint do user no arquivo app.py junto com os blueprints das outras entidades
38. Adicionar um endpoint de login na API p/ obter access token
    - no arquivo resources/user.py, importar a lib flask_jwt_extended e importar create_access_token
        from flask_jwt_extended import create_access_token
    - no mesmo arquivo, registrar o endpoinnt /login e criar o access_token
39. Proteger endpoints a partir de solicitação de JWT
    - no arquivo resources/item.py, importar a lib flask_jwt_extended e importar jwt_required
    - no endpoint /item, na função post (criar item), adicionar a anotação @jwt_required() 
        agora, para enviar requisições, é necessário adicionar o access_token criado no item 38 no header do request
na app insomnia (aba Auth, selecionar bearer token)
    - adicionar @jwt_required() nos demais endpoints (ver arquivo no git)
40. Error Handling com Flask-JWT-extended
    Importante saber que:
    * O JWT pode expirar (não dura pra sempre). [@jwt.expired_token_loader]
    * O JWT pode estar inválido, por exemplo, se o cliente realizar alterações nele. [@jwt.invalid_token_loader]
    * Um JWT pode ser solicitado, mas nenhum foi apresentado/autorizado. [@jwt.unauthorized_loader]
    - adicionar configurações no arquivo app.py usando Flask-JWT-extended
41. Adicionar logout à API REST
    Se o usuário quer finalizar o access_token e quer realizar o logout na api, então vamos ter que cancelar (revoke) o token de acesso do usuário. Assim, devemos pegar o access_token, armazenar isso em algum lugar e toda vez que algum access_token for usado nós vamos verificar se ele está na lista de cancelados da API.
    - criar arquivo blocklist.py na raiz da aplicação e adicionar o BLOCKLIST set
    - adicionar configurações da blocklist no arquivo app.py
        - importar BLOCKLIST de blocklist.py
        - adicionar funções @jwt.token_in_blocklist_loader e @jwt.revoked_token_loader
    - adicionar no arquivo user.py o endpoint "/logout" e registrá-lo
    OBS: Usar blocklist no código (blocklist.py) não é recomendado. Quando a aplicação é reiniciada as informações existentes na blocklist são apagadas. A recomendação é armazenar esses JWTs em banco de dados ou, melhor ainda, em cache (REDIS, por exemplo)
42. Realizar "refresh" no access_token
    O token tem validade, ele expira. Para entregar uma melhor experiência ao usuário a aplicação pode solicitar
    Qdo logamos, obtemos um fresh access_token. Qdo precisamos que a app cliente realize refresh no access_token, podemos usar um non-fresh token. Além disso, alguns endpoints podem ser invocados somente com fresh token e outros com um non-fresh token. Se o endpoint não é "tão importante", podemos utilizar um non-fresh token. Qdo um usuário quer deletar a própria conta, por exemplo, podemos considerar um fresh token.
    - criar refresh tokens usando flask_jwt_extended. No arquivo resource/user.py, importar create_refresh_token e get_jwt_identity
    - adicionar refresh_token no método post da rota /login (e adicionar o parâmetro fresh no access_token)
    - criar o endpoint refresh no arquivo user.py (método post)
    - adicionar decorator @jwt_required(fresh=True) nos endpoints de operações destrutivas como mudar password ou apagar conta.
        no arquivo item.py, adicionar @jwt_required(fresh=True) no método que cria itens, por exemplo
    - no arquivo app.py, adicionar o método @jwt.needs_fresh_token_loader para
DB MIGRATION
    Por que realizar migração de banco de dados?
        Na medida em que trabalhamos na aplicação, particularmente em um longo período de tempo, é inegável que adicionamos colunas aos modelos ou até mesmo adicionamos novos modelos.
        Para realizar alterações dessa magnitude ferramentas como Alembic (ferramenta de migração de banco de dados da SQLAlchemy - https://pypi.org/project/alembic/) e Flask-Migrate contribuem para esse processo sem que haja assincronismo entre os modelos e possíveis problemas qdo usamos SQLAlchemy.
        "
            Alembic is a database migrations tool written by the author of SQLAlchemy. A migrations tool offers the following functionality:

            Can emit ALTER statements to a database in order to change the structure of tables and other constructs

            Provides a system whereby “migration scripts” may be constructed; each script indicates a particular series of steps that can “upgrade” a target database to a new version, and optionally a series of steps that can “downgrade” similarly, doing the same steps in reverse.

            Allows the scripts to execute in some sequential manner.
        "
        Podemos usar Alembic para detectar alterações nos modelos, bem como passos necessários para "atualizar" o banco de dados para que ele possa receber os novos modelos. Daí nós podemos usar Alembic para modificar o banco de dados seguindo os passos corretos. Alembic também rastreia cada passo da migração para que haja versionamento e recuperação do banco de dados, se necessário. 
        Como Alembic tem essa feature de rastreabilidade, pode ser usado para crear tabelas do zero, simplesmente aplicando a migração desde o começo. Vale ressaltar que migração corresponde a qualquer alteração realizada nos modelos de dados (novas tabelas, colunas ou valores específicos). Essas alterações podem "quebrar" a aplicação e/ou o banco de dados se não forem realizadas de forma coordenada durante fase de deployment. Por isso, ferramentas como Alembic contribuem para a sanidade do desenvolvedor: elas ajudam a organizar essa "migração"(atualização) do banco de dados.
        - adicionar flask-migrate ao requirements.txt
        - executar pip install -r requirements.txt
        - no arquivo app.py importar Migrate de flask_migrate e relacionar Migrate com a app e o db (migrate = Migrate(app, db)) depois da linha de inicialização do db (db.init_app(app))
        - Inicializar o database com Flask-Migrate
            - no terminal, digitar flask db init (esse comando vai adicionar uma pasta "migrations" à aplicação e dentro, além de arquivos de configuração, há uma pasta "versions" para controlar o versionamento do banco de dados a cada modificação realizada.)
        - criar a primeira "migração" usando Alembic
            - deletar pasta instance/data.db da pasta da app
            - no terminal, executar o comando flask db migrate
            - após executado o comando, Alembic vai criar um novo db em instance/data.db a partir das definições apresentadas na pasta models/
            - dentro da pasta migrations/versions será criada um arquivo <migration_identifier>.py cujo conteúdo corresponde aos métodos de migração da ferramenta (identifiers, upgrade e downgrade)
            O comando flask db migrate gera o arquivo de migração, mas não aplica a migração, propriamente. Para realizar a aplicação devemos realizar outro comando
        - no terminal, executar o comando flask db upgrade
            importante registrar que Alembic também cria uma tabela para controlar as versões de migração do banco de dados da app
    Alterando modelos de dados SQLAlchemy e realizar migração a partir da mudança do modelo
        - no arquivo models/items.py, adicionar o campo description ao modelo ItemModel (description = db.Column(db.String))
        - no terminal executar o comando flask db migrate. Esse comando fará com que Alembic avalie a versão anterior do modelo db, compare a versão modificada com a anterior e fará uma atualização no modelo do banco a partir das alterações realizadas. Um novo arquivo .py com o nome da nova migration_identifier é criado e o identifier anterior vai ser inserido no identifier down_revision, isso tudo dentro do arquivo <revision_identifier>.py
        - revisar o arquivo <revision_identifier>.py criado a partir da execução do comando e, uma vez que os modelos estão ok, executar flask db upgrade

